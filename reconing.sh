#!/bin/bash

# ==============================================================================
# Enhanced Simple Recon Script by Walnutsec (Single File Output)
# Tools: whatweb, nmap, subfinder, httpx, nuclei, ffuf, waybackurls, nikto
# Usage: ./enhanced-recon.sh <url> [--full|--quick]
# Example: ./enhanced-recon.sh https://example.com --full
# ==============================================================================

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Show usage
show_usage() {
    echo -e "${WHITE}Usage:${NC} $0 <url> [--full|--quick]"
    echo ""
    echo -e "${WHITE}Options:${NC}"
    echo -e "  ${GREEN}--full${NC}    Comprehensive scan (all tools + wayback + nikto)"
    echo -e "  ${GREEN}--quick${NC}   Quick scan (basic tools only)"
    echo -e "  ${GREEN}(none)${NC}    Normal scan (original tools + some extras)"
    echo ""
    echo -e "${WHITE}Examples:${NC}"
    echo -e "  $0 https://example.com"
    echo -e "  $0 https://example.com --full"
    echo -e "  $0 example.com --quick"
    exit 1
}

# Parse arguments
SCAN_TYPE="normal"
if [ "$#" -eq 0 ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
    show_usage
fi

TARGET_URL=$1
if [ "$#" -eq 2 ]; then
    case $2 in
        --full)
            SCAN_TYPE="full"
            ;;
        --quick)
            SCAN_TYPE="quick"
            ;;
        *)
            echo -e "${RED}❌ Invalid option: $2${NC}"
            show_usage
            ;;
    esac
fi

# Extract domain
DOMAIN=$(echo $TARGET_URL | sed 's|https\?://||' | sed 's|/.*||' | sed 's|:.*||')
OUTPUT_FILE="enhanced_recon_${DOMAIN}_$(date +%Y%m%d_%H%M%S).txt"
SUBDOMAINS_TMP="${DOMAIN}_subdomains.tmp"
LIVE_SUBDOMAINS_TMP="${DOMAIN}_live_subdomains.tmp"

# Wordlists (in order of preference - Parrot OS + Kali compatible)
WORDLISTS=(
    "/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt"  # Kali default
    "/usr/share/wordlists/dirb/common.txt"                          # Kali default  
    "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt"  # SecLists
    "/usr/share/seclists/Discovery/Web-Content/common.txt"          # SecLists
    "/home/$(whoami)/wordlists/directory-list-2.3-medium.txt"       # Custom user path
    "/opt/wordlists/directory-list-2.3-medium.txt"                  # Custom opt path
    "/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt"  # Alternative path
    "/usr/share/dirb/wordlists/common.txt"                          # Dirb alternative
)

# Find available wordlist
WORDLIST=""
for wl in "${WORDLISTS[@]}"; do
    if [ -f "$wl" ]; then
        WORDLIST="$wl"
        break
    fi
done

if [ -z "$WORDLIST" ]; then
    echo -e "${YELLOW}⚠️ Warning: No wordlist found in common locations.${NC}"
    echo -e "${YELLOW}   You can download wordlists with:${NC}"
    echo -e "${YELLOW}   - git clone https://github.com/danielmiessler/SecLists.git /opt/SecLists${NC}"
    echo -e "${YELLOW}   - Or manually download directory-list-2.3-medium.txt to ~/wordlists/${NC}"
    echo -e "${YELLOW}   Directory fuzzing will be skipped.${NC}"
fi

# Utility functions
print_status() {
    echo -e "${BLUE}[*]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[+]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_header() {
    echo "" >> $OUTPUT_FILE
    echo "============================== $1 ==============================" >> $OUTPUT_FILE
    echo "Timestamp: $(date)" >> $OUTPUT_FILE
    echo "" >> $OUTPUT_FILE
}

check_tool() {
    if ! command -v $1 &> /dev/null; then
        print_warning "Tool '$1' not found. Skipping..."
        return 1
    fi
    return 0
}

# Banner
echo -e "${PURPLE}🚀 Enhanced Recon Script v2.0${NC}"
echo -e "${CYAN}Target: $DOMAIN${NC}"
echo -e "${CYAN}Scan Type: $SCAN_TYPE${NC}"
echo -e "${CYAN}Output: $OUTPUT_FILE${NC}"
echo ""

# Initialize output file
cat > $OUTPUT_FILE << EOF
===============================================================================
                    ENHANCED RECONNAISSANCE REPORT
===============================================================================
Target URL: $TARGET_URL
Domain: $DOMAIN
Scan Type: $SCAN_TYPE
Start Time: $(date)
Generated by: Enhanced Recon Script v2.0
===============================================================================
EOF

# Cleanup function
cleanup() {
    rm -f $SUBDOMAINS_TMP $LIVE_SUBDOMAINS_TMP
}
trap cleanup EXIT

# 1. WHATWEB - Technology Detection
print_status "(1/8) Running WhatWeb for technology identification..."
print_header "WHATWEB - TECHNOLOGY IDENTIFICATION"
if check_tool whatweb; then
    whatweb -v "$TARGET_URL" >> $OUTPUT_FILE 2>/dev/null
    print_success "WhatWeb completed"
else
    echo "WhatWeb not available" >> $OUTPUT_FILE
fi

# 2. NMAP - Port Scanning
print_status "(2/8) Running Nmap for port scanning..."
print_header "NMAP - PORT SCANNING"
if check_tool nmap; then
    case $SCAN_TYPE in
        "quick")
            nmap -T4 --top-ports 100 "$DOMAIN" >> $OUTPUT_FILE 2>/dev/null
            ;;
        "full")
            nmap -sS -sV -sC -T4 --top-ports 1000 "$DOMAIN" >> $OUTPUT_FILE 2>/dev/null
            ;;
        *)
            nmap -sC -sV -T4 "$DOMAIN" >> $OUTPUT_FILE 2>/dev/null
            ;;
    esac
    print_success "Nmap completed"
else
    echo "Nmap not available" >> $OUTPUT_FILE
fi

# 3. SUBFINDER - Subdomain Discovery
print_status "(3/8) Running Subfinder for subdomain discovery..."
print_header "SUBFINDER - SUBDOMAIN DISCOVERY"
if check_tool subfinder; then
    subfinder -d "$DOMAIN" -o $SUBDOMAINS_TMP -silent 2>/dev/null
    if [ -f $SUBDOMAINS_TMP ]; then
        cat $SUBDOMAINS_TMP >> $OUTPUT_FILE
        subdomain_count=$(wc -l < $SUBDOMAINS_TMP)
        echo "" >> $OUTPUT_FILE
        echo "Total subdomains found: $subdomain_count" >> $OUTPUT_FILE
        print_success "Subfinder found $subdomain_count subdomains"
    else
        echo "No subdomains found" >> $OUTPUT_FILE
        touch $SUBDOMAINS_TMP
    fi
else
    echo "Subfinder not available" >> $OUTPUT_FILE
    touch $SUBDOMAINS_TMP
fi

# 4. ADDITIONAL SUBDOMAIN TOOLS (if full scan)
if [ "$SCAN_TYPE" == "full" ]; then
    print_status "(4/8) Running additional subdomain discovery tools..."
    print_header "ADDITIONAL SUBDOMAIN DISCOVERY"
    
    # Assetfinder
    if check_tool assetfinder; then
        echo "--- Assetfinder Results ---" >> $OUTPUT_FILE
        assetfinder --subs-only "$DOMAIN" 2>/dev/null | tee -a $SUBDOMAINS_TMP >> $OUTPUT_FILE
        echo "" >> $OUTPUT_FILE
    fi
    
    # Remove duplicates
    if [ -f $SUBDOMAINS_TMP ]; then
        sort $SUBDOMAINS_TMP | uniq > "${SUBDOMAINS_TMP}.sorted"
        mv "${SUBDOMAINS_TMP}.sorted" $SUBDOMAINS_TMP
        final_count=$(wc -l < $SUBDOMAINS_TMP)
        echo "Total unique subdomains: $final_count" >> $OUTPUT_FILE
        print_success "Additional subdomain discovery completed"
    fi
else
    print_status "(4/8) Skipping additional subdomain discovery (use --full for more tools)"
fi

# 5. HTTPX - Live Subdomain Detection
print_status "(5/8) Running httpx to identify live subdomains..."
print_header "HTTPX - LIVE SUBDOMAINS"
if check_tool httpx && [ -f $SUBDOMAINS_TMP ] && [ -s $SUBDOMAINS_TMP ]; then
    httpx -l $SUBDOMAINS_TMP -o $LIVE_SUBDOMAINS_TMP -silent -title -tech-detect -status-code -content-length 2>/dev/null
    if [ -f $LIVE_SUBDOMAINS_TMP ] && [ -s $LIVE_SUBDOMAINS_TMP ]; then
        cat $LIVE_SUBDOMAINS_TMP >> $OUTPUT_FILE
        live_count=$(wc -l < $LIVE_SUBDOMAINS_TMP)
        echo "" >> $OUTPUT_FILE
        echo "Total live subdomains: $live_count" >> $OUTPUT_FILE
        print_success "httpx found $live_count live subdomains"
    else
        echo "No live subdomains found" >> $OUTPUT_FILE
        print_warning "No live subdomains detected"
    fi
else
    echo "httpx not available or no subdomains to check" >> $OUTPUT_FILE
fi

# 6. NUCLEI - Vulnerability Scanning
print_status "(6/8) Running Nuclei for vulnerability scanning..."
print_header "NUCLEI - VULNERABILITY SCANNING"
if check_tool nuclei && [ -f $LIVE_SUBDOMAINS_TMP ] && [ -s $LIVE_SUBDOMAINS_TMP ]; then
    nuclei -l $LIVE_SUBDOMAINS_TMP -c 50 -bs 35 -severity critical,high,medium -silent >> $OUTPUT_FILE 2>/dev/null
    print_success "Nuclei vulnerability scan completed"
elif [ ! -s $LIVE_SUBDOMAINS_TMP ]; then
    echo "No live subdomains available for vulnerability scanning" >> $OUTPUT_FILE
    print_warning "Skipping Nuclei - no live subdomains"
else
    echo "Nuclei not available" >> $OUTPUT_FILE
fi

# 7. DIRECTORY FUZZING
print_status "(7/8) Running directory fuzzing..."
print_header "FFUF - DIRECTORY FUZZING"
if [ -n "$WORDLIST" ] && check_tool ffuf; then
    echo "Fuzzing target: $TARGET_URL" >> $OUTPUT_FILE
    echo "Wordlist: $WORDLIST" >> $OUTPUT_FILE
    echo "" >> $OUTPUT_FILE
    
    case $SCAN_TYPE in
        "quick")
            ffuf -w "$WORDLIST" -u "${TARGET_URL}/FUZZ" -c -v -t 50 -fc 404,403 -fs 0 -mc 200,204,301,302,307,401,500 >> $OUTPUT_FILE 2>/dev/null
            ;;
        "full")
            ffuf -w "$WORDLIST" -u "${TARGET_URL}/FUZZ" -c -v -t 100 -fc 404 -recursion -recursion-depth 2 >> $OUTPUT_FILE 2>/dev/null
            ;;
        *)
            ffuf -w "$WORDLIST" -u "${TARGET_URL}/FUZZ" -c -v -t 50 -fc 404,403 >> $OUTPUT_FILE 2>/dev/null
            ;;
    esac
    print_success "Directory fuzzing completed"
elif [ -z "$WORDLIST" ]; then
    echo "No wordlist available for directory fuzzing" >> $OUTPUT_FILE
    print_warning "Skipping directory fuzzing - no wordlist found"
else
    echo "ffuf not available" >> $OUTPUT_FILE
fi

# 8. ADDITIONAL TOOLS (Full scan only)
if [ "$SCAN_TYPE" == "full" ]; then
    print_status "(8/8) Running additional reconnaissance tools..."
    
    # Wayback URLs
    print_header "WAYBACK MACHINE - HISTORICAL URLS"
    if check_tool waybackurls; then
        echo "Fetching historical URLs for $DOMAIN..." >> $OUTPUT_FILE
        waybackurls "$DOMAIN" 2>/dev/null | head -100 >> $OUTPUT_FILE
        echo "" >> $OUTPUT_FILE
        echo "Note: Showing first 100 URLs. Historical URLs can reveal old endpoints, parameters, and files." >> $OUTPUT_FILE
        print_success "Wayback URLs retrieved"
    else
        echo "waybackurls not available" >> $OUTPUT_FILE
    fi
    
    # Nikto Web Scanner
    print_header "NIKTO - WEB VULNERABILITY SCANNER"
    if check_tool nikto; then
        nikto -h "$TARGET_URL" -Format txt -output - 2>/dev/null >> $OUTPUT_FILE
        print_success "Nikto web scan completed"
    else
        echo "nikto not available" >> $OUTPUT_FILE
    fi
    
    print_success "Additional tools completed"
else
    print_status "(8/8) Skipping additional tools (use --full for wayback URLs and nikto)"
fi

# Finalize report
cat >> $OUTPUT_FILE << EOF

===============================================================================
                           RECONNAISSANCE SUMMARY
===============================================================================
Scan completed: $(date)
Target: $TARGET_URL ($DOMAIN)
Scan type: $SCAN_TYPE

STATISTICS:
- Subdomains discovered: $([ -f $SUBDOMAINS_TMP ] && wc -l < $SUBDOMAINS_TMP || echo "0")
- Live subdomains: $([ -f $LIVE_SUBDOMAINS_TMP ] && wc -l < $LIVE_SUBDOMAINS_TMP || echo "0")
- Wordlist used: $([ -n "$WORDLIST" ] && echo "$WORDLIST" || echo "None")

RECOMMENDATIONS:
1. Review port scan results for unusual services
2. Check subdomain results for interesting targets  
3. Analyze vulnerability scan findings (prioritize critical/high)
4. Test discovered directories for sensitive files
5. $([ "$SCAN_TYPE" == "full" ] && echo "Review wayback URLs for old endpoints and parameters" || echo "Run with --full for more comprehensive results")

Generated by Enhanced Recon Script v2.0
Happy Hunting! 🎯
===============================================================================
EOF

echo ""
print_success "🎉 Reconnaissance completed!"
print_success "📄 All results saved in: $OUTPUT_FILE"
echo ""
echo -e "${CYAN}Summary:${NC}"
echo -e "  📊 Subdomains: $([ -f $SUBDOMAINS_TMP ] && wc -l < $SUBDOMAINS_TMP || echo "0")"
echo -e "  🟢 Live subdomains: $([ -f $LIVE_SUBDOMAINS_TMP ] && wc -l < $LIVE_SUBDOMAINS_TMP || echo "0")"
echo -e "  🎯 Scan type: $SCAN_TYPE"
echo ""
echo -e "${GREEN}Happy Hacking! 🚀${NC}"